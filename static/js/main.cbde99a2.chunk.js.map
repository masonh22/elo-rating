{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Leaderboard","players","length","this","list","i","add_player","player","rating","unshift","j","splice","name","change","BottomNav","props","value","BottomNavigation","onChange","event","newValue","update","showLabels","className","BottomNavigationAction","label","LeaderboardView","map","rank","key","username","games_played","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","ReportView","classes","React","useState","winner","setWinner","loser","setLoser","makeList","taken","push","MenuItem","FormControl","InputLabel","id","Select","labelId","e","target","Button","variant","color","onClick","submit","History","state","history","ref","limitToLast","once","data","setState","forEach","toJSON","reverse","date","mmr_change","make_list","Component","Login","user","setUser","pass","setPass","TextField","type","v","Content","leaderboard","login","view","App","current_view","orderByChild","on","md5","password","alert","val","then","hasChild","mmrW","child","mmrL","gamesW","gamesL","nameW","nameL","win_prob","Math","pow","win_probability","round","d","Date","historyKey","newHistory","posted_by","getMonth","toString","getDate","updates","change_current_view","add_game","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wYAaAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,gBACnBC,MAAO,+CAIMR,QAAf,E,iBCAMS,EAAWT,EAASS,WAEpBC,E,WACJ,WAAYC,GAEV,GAFoB,oBAEG,IAAnBA,EAAQC,OAAgBC,KAAKC,KAAO,OACnC,CACHD,KAAKC,KAAOH,EAAQC,OAAS,EAAI,CAACD,EAAQ,IAAM,GAChD,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAQC,OAAQG,IAClCF,KAAKG,WAAWL,EAAQI,K,uDAKnBE,GACT,GAAIJ,KAAKC,KAAK,GAAGI,OAASD,EAAOC,OAC/BL,KAAKC,KAAKK,QAAQF,OAEf,CAEH,IADA,IAAIG,EAAI,EACDA,EAAIP,KAAKC,KAAKF,QAAUC,KAAKC,KAAKM,GAAGF,OAASD,EAAOC,QAC1DE,GAAK,EAEPP,KAAKC,KAAKO,OAAOD,EAAG,EAAGH,M,oCAIbK,EAAMC,GAElB,IADA,IAAIR,EAAI,EACDA,EAAIF,KAAKC,KAAKF,QAAUC,KAAKC,KAAKC,GAAGO,OAASA,GACnDP,GAAK,EAEP,GAAIA,IAAMF,KAAKC,KAAKF,OAAQ,KAAM,iBAClC,IAAMK,EAASJ,KAAKC,KAAKC,GACzBF,KAAKC,KAAKO,OAAON,EAAG,GACpBE,EAAOC,QAAUK,EACjBV,KAAKG,WAAWC,O,KAKdO,EAAY,SAAAC,GAChB,IAAMC,EAAQD,EAAMC,MAEpB,OACE,kBAACC,EAAA,EAAD,CACED,MAAOA,EACPE,SAAU,SAACC,EAAOC,GAChBL,EAAMM,OAAOD,IAEfE,YAAU,EACVC,UAAU,cAEV,kBAACC,EAAA,EAAD,CAAwBC,MAAM,gBAC9B,kBAACD,EAAA,EAAD,CAAwBC,MAAM,gBAC9B,kBAACD,EAAA,EAAD,CAAwBC,MAAM,YAC9B,kBAACD,EAAA,EAAD,CAAwBC,MAAM,aAK9BC,EAAkB,SAAAX,GACtB,IAAMX,EAAOW,EAAMd,QAAQ0B,KAAI,SAACpB,EAAQqB,GAAT,OAC7B,wBAAIC,IAAKtB,EAAOuB,UAAWvB,EAAOK,KAAlC,UAA+CL,EAAOC,OAAtD,mBAA8ED,EAAOwB,iBAEvF,OAAO,4BAAK3B,IAGR4B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,KAEZC,YAAa,CACXC,UAAWN,EAAMG,QAAQ,QAIvBI,EAAa,SAAA1B,GACjB,IAAM2B,EAAUV,IADU,EAEEW,IAAMC,SAAS,IAFjB,mBAEnBC,EAFmB,KAEXC,EAFW,OAGAH,IAAMC,SAAS,IAHf,mBAGnBG,EAHmB,KAGZC,EAHY,KAKpBC,EAAW,SAACC,GAEhB,IADA,IAAM9C,EAAO,GACJC,EAAI,EAAGA,EAAIU,EAAMd,QAAQC,OAAQG,IACpCU,EAAMd,QAAQI,GAAGyB,WAAaoB,GAClC9C,EAAK+C,KAAK,kBAACC,EAAA,EAAD,CAAUpC,MAAOD,EAAMd,QAAQI,GAAGyB,UAAWf,EAAMd,QAAQI,GAAGO,OAE1E,OAAOR,GAGT,OACE,yBAAKmB,UAAU,aACb,kBAAC8B,EAAA,EAAD,CAAa9B,UAAWmB,EAAQP,aAC9B,kBAACmB,EAAA,EAAD,CAAYC,GAAG,uBAAf,UACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,sBACRF,GAAG,gBACHvC,MAAO6B,EACP3B,SAAU,SAACwC,GAAD,OAAOZ,EAAUY,EAAEC,OAAO3C,QACpCO,UAAU,UAET0B,EAASF,KAGd,kBAACM,EAAA,EAAD,CAAa9B,UAAWmB,EAAQP,aAC9B,kBAACmB,EAAA,EAAD,CAAYC,GAAG,sBAAf,SACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,qBACRF,GAAG,eACHvC,MAAO+B,EACP7B,SAAU,SAACwC,GAAD,OAAOV,EAASU,EAAEC,OAAO3C,QACnCO,UAAU,UAET0B,EAASJ,KAGd,kBAACe,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAMhD,EAAMiD,OAAOnB,EAAQE,KAHtC,YAWAkB,E,kDACJ,WAAYlD,GAAQ,IAAD,8BACjB,cAAMA,IACDmD,MAAQ,CAAEC,QAAS,IAFP,E,gEAKE,IAAD,OAClBpE,EAASqE,IAAI,WAAWC,YAAY,GAAGC,KAAK,SAAS,SAAAC,GACnD,EAAKC,UAAS,WACZ,IAAML,EAAU,GAIhB,OAHAI,EAAKE,SAAQ,SAAAtD,GACXgD,EAAQhB,KAAKhC,EAAMuD,aAEd,CAAEP,QAASA,EAAQQ,mB,kCAM9B,OAAOxE,KAAK+D,MAAMC,QAAQxC,KAAI,SAACR,EAAOS,GAAR,OAC5B,wBAAIC,IAAKV,EAAMU,KAAMV,EAAMyD,KAA3B,KAAmCzD,EAAM0B,OAAzC,UAAwD1B,EAAM4B,MAA9D,SAA2E5B,EAAM0D,WAAjF,a,+BAKF,OAAO,4BAAK1E,KAAK2E,iB,GAzBCnC,IAAMoC,WA6BtBC,EAAQ,SAAAjE,GAAU,IAAD,EACG4B,IAAMC,SAAS,IADlB,mBACdqC,EADc,KACRC,EADQ,OAEGvC,IAAMC,SAAS,IAFlB,mBAEduC,EAFc,KAERC,EAFQ,KAIrB,OACE,yBAAK7D,UAAU,aACb,kBAAC8D,EAAA,EAAD,CACE9B,GAAG,iBACH9B,MAAM,WACN6D,KAAK,SACLpE,SAAU,SAACqE,GAAD,OAAOL,EAAQK,EAAE5B,OAAO3C,UACpC,kBAACqE,EAAA,EAAD,CACE9B,GAAG,iBACH9B,MAAM,WACN6D,KAAK,WACLpE,SAAU,SAACqE,GAAD,OAAOH,EAAQG,EAAE5B,OAAO3C,UAEpC,kBAAC4C,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAMhD,EAAMiD,OAAOiB,EAAME,KAHpC,YAUAK,EAAU,SAAAzE,GAKd,MAJc,CAAC,kBAAC,EAAD,CAAiBd,QAASc,EAAM0E,YAAYrF,OAC3D,kBAAC,EAAD,CAAYH,QAASc,EAAM0E,YAAYrF,KAAM4D,OAAQjD,EAAMiD,SAC3D,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOA,OAAQjD,EAAM2E,SACR3E,EAAM4E,OAiHNC,E,kDAxGb,WAAY7E,GAAQ,IAAD,8BACjB,cAAMA,IACDmD,MAAQ,CACX2B,aAAc,EACd5F,QAAS,GACTwF,YAAa,IAAIzF,EAAY,IAC7BiF,KAAM,MANS,E,gEAUE,IAAD,OAClBlF,EAASqE,IAAI,SAAS0B,aAAa,UAAUC,GAAG,SAAS,SAAAxB,GACvD,EAAKC,UAAS,WACZ,IAAMvE,EAAU,GAChBsE,EAAKE,SAAQ,SAAAQ,GACX,IAAM1E,EAAS0E,EAAKP,SACpBnE,EAAM,SAAe0E,EAAKpD,IAC1B5B,EAAQkD,KAAK5C,MAEf,IAAMkF,EAAc,IAAIzF,EAAYC,GACpC,MAAO,CAAEA,UAASwF,uB,4BAKlBR,EAAME,GAEV,IADA,IAAI9E,EAAI,EACDA,EAAIF,KAAK+D,MAAMjE,QAAQC,QAAUC,KAAK+D,MAAMjE,QAAQI,GAAGyB,WAAamD,GACzE5E,GAAK,EAEHA,IAAMF,KAAK+D,MAAMjE,QAAQC,OAIpB8F,IAAIb,KAAUhF,KAAK+D,MAAMjE,QAAQI,GAAG4F,SAI7C9F,KAAKqE,SAAS,CAAEqB,aAAc,EAAGZ,KAAMA,IAHrCiB,MAAM,yBAJNA,MAAM,2B,0CAUUC,GAClBhG,KAAKqE,SAAS,CAAEqB,aAAcM,M,+BAGvBtD,EAAQE,GAAQ,IAAD,OACE,OAApB5C,KAAK+D,MAAMe,MAIflF,EAASqE,IAAI,SAASE,KAAK,SAAS8B,MAAK,SAAA7B,GACvC,GAAIA,EAAK8B,SAASxD,IAAW0B,EAAK8B,SAAStD,GAAQ,CACjD,IAAMuD,EAAO/B,EAAKgC,MAAM1D,EAAS,WAAWsD,MACtCK,EAAOjC,EAAKgC,MAAMxD,EAAQ,WAAWoD,MACrCM,EAASlC,EAAKgC,MAAM1D,EAAS,iBAAiBsD,MAC9CO,EAASnC,EAAKgC,MAAMxD,EAAQ,iBAAiBoD,MAC7CQ,EAAQpC,EAAKgC,MAAM1D,EAAS,SAASsD,MACrCS,EAAQrC,EAAKgC,MAAMxD,EAAQ,SAASoD,MACpCU,EAhEU,SAACP,EAAME,GAC7B,OAAQ,GAAK,EAAIM,KAAKC,IAAI,IAAKT,EAAOE,GAAQ,MA+DvBQ,CAAgBV,EAAME,GACjC3F,EAASiG,KAAKG,MAAiB,GAAXJ,GAEpBK,EAAI,IAAIC,KAERC,EAAarH,EAASqE,IAAI,WAAWjB,OAAOtB,IAC5CwF,EAAa,CACjBxE,OAAQ8D,EACR5D,MAAO6D,EACPU,UAAW,EAAKpD,MAAMe,KACtBJ,WAAYhE,EACZ+D,MAAOsC,EAAEK,WAAa,GAAGC,WAAa,IAAMN,EAAEO,UAAUD,YAGpDE,EAAU,GAChBA,EAAQ,YAAcN,GAAcC,EACpCK,EAAQ,SAAW7E,EAAS,WAAayD,EAAOzF,EAChD6G,EAAQ,SAAW3E,EAAQ,WAAayD,EAAO3F,EAC/C6G,EAAQ,SAAW7E,EAAS,iBAAmB4D,EAAS,EACxDiB,EAAQ,SAAW3E,EAAQ,iBAAmB2D,EAAS,EACvD3G,EAASqE,MAAM/C,OAAOqG,OAG1BvH,KAAKwH,oBAAoB,IAlCvBzB,MAAM,8B,+BAqCA,IAAD,OACP,OACE,yBAAK3E,UAAU,OACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACEkE,YAAatF,KAAK+D,MAAMuB,YACxBE,KAAMxF,KAAK+D,MAAM2B,aACjB7B,OAAQ,SAACnB,EAAQE,GAAT,OAAmB,EAAK6E,SAAS/E,EAAQE,IACjD2C,MAAO,SAACT,EAAME,GAAP,OAAgB,EAAKO,MAAMT,EAAME,OAE5C,yBAAK5D,UAAU,UACb,kBAAC,EAAD,CACEP,MAAOb,KAAK+D,MAAM2B,aAClBxE,OAAQ,SAACkE,GAAD,OAAO,EAAKoC,oBAAoBpC,Y,GAnGlC5C,IAAMoC,WCvMJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbde99a2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAgCVdrbzL6Qcc5byXkkABSm4oUAonDWhs\",\r\n  authDomain: \"elo-rating-b8532.firebaseapp.com\",\r\n  databaseURL: \"https://elo-rating-b8532.firebaseio.com\",\r\n  projectId: \"elo-rating-b8532\",\r\n  storageBucket: \"elo-rating-b8532.appspot.com\",\r\n  messagingSenderId: \"1089038380501\",\r\n  appId: \"1:1089038380501:web:66b47d2dd736f330f8615c\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;\r\n/*\r\n<!-- The core Firebase JS SDK is always required and must be listed first -->\r\n<script src=\"https://www.gstatic.com/firebasejs/7.19.0/firebase-app.js\"></script>\r\n\r\n<!-- TODO: Add SDKs for Firebase products that you want to use\r\n     https://firebase.google.com/docs/web/setup#available-libraries -->\r\n\r\n<script>\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAgCVdrbzL6Qcc5byXkkABSm4oUAonDWhs\",\r\n    authDomain: \"elo-rating-b8532.firebaseapp.com\",\r\n    databaseURL: \"https://elo-rating-b8532.firebaseio.com\",\r\n    projectId: \"elo-rating-b8532\",\r\n    storageBucket: \"elo-rating-b8532.appspot.com\",\r\n    messagingSenderId: \"1089038380501\",\r\n    appId: \"1:1089038380501:web:66b47d2dd736f330f8615c\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n</script>*/","import React from 'react';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport firebase from './firebase.js';\nimport md5 from 'md5';\n\nconst database = firebase.database();\n\nclass Leaderboard {\n  constructor(players) {\n    // Add players to sorted list\n    if (players.length === 0) { this.list = []; }\n    else {\n      this.list = players.length > 0 ? [players[0]] : []\n      for (var i = 1; i < players.length; i++) {\n        this.add_player(players[i])\n      }\n    }\n  }\n\n  add_player(player) {\n    if (this.list[0].rating < player.rating) {\n      this.list.unshift(player);\n    }\n    else {\n      var j = 1;\n      while (j < this.list.length && this.list[j].rating > player.rating) {\n        j += 1;\n      }\n      this.list.splice(j, 0, player);\n    }\n  }\n\n  update_rating(name, change) {\n    var i = 0;\n    while (i < this.list.length && this.list[i].name !== name) {\n      i += 1;\n    }\n    if (i === this.list.length) throw \"Name not found\";\n    const player = this.list[i];\n    this.list.splice(i, 1);\n    player.rating += change;\n    this.add_player(player);\n  }\n\n}\n\nconst BottomNav = props => {\n  const value = props.value;\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => {\n        props.update(newValue);\n      }}\n      showLabels\n      className=\"bottom-nav\"\n    >\n      <BottomNavigationAction label=\"Leaderboard\" />\n      <BottomNavigationAction label=\"Report Game\" />\n      <BottomNavigationAction label=\"History\" />\n      <BottomNavigationAction label=\"Log in\" />\n    </BottomNavigation>\n  )\n}\n\nconst LeaderboardView = props => {\n  const list = props.players.map((player, rank) =>\n    <li key={player.username}>{player.name}, MMR: {player.rating}, Games played: {player.games_played}</li>\n  );\n  return <ol>{list}</ol>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst ReportView = props => {\n  const classes = useStyles();\n  const [winner, setWinner] = React.useState('');\n  const [loser, setLoser] = React.useState('');\n\n  const makeList = (taken) => {\n    const list = [];\n    for (var i = 0; i < props.players.length; i++) {\n      if (props.players[i].username === taken) continue;\n      list.push(<MenuItem value={props.players[i].username}>{props.players[i].name}</MenuItem>)\n    }\n    return list;\n  };\n\n  return (\n    <div className=\"selectors\">\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"winner-select-label\">Winner</InputLabel>\n        <Select\n          labelId=\"winner-select-label\"\n          id=\"winner-select\"\n          value={winner}\n          onChange={(e) => setWinner(e.target.value)}\n          className=\"select\"\n        >\n          {makeList(loser)}\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"loser-select-label\">Loser</InputLabel>\n        <Select\n          labelId=\"loser-select-label\"\n          id=\"loser-select\"\n          value={loser}\n          onChange={(e) => setLoser(e.target.value)}\n          className=\"select\"\n        >\n          {makeList(winner)}\n        </Select>\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => props.submit(winner, loser)}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { history: [] };\n  }\n\n  componentDidMount() {\n    database.ref('history').limitToLast(5).once('value', data => {\n      this.setState(() => {\n        const history = [];\n        data.forEach(event => {\n          history.push(event.toJSON());\n        })\n        return { history: history.reverse() };\n      });\n    });\n  }\n\n  make_list() {\n    return this.state.history.map((event, rank) =>\n      <li key={event.key}>{event.date}: {event.winner} beats {event.loser}, +/- {event.mmr_change} MMR</li>\n    );\n  }\n\n  render() {\n    return <ul>{this.make_list()}</ul>;\n  }\n}\n\nconst Login = props => {\n  const [user, setUser] = React.useState('');\n  const [pass, setPass] = React.useState('');\n\n  return (\n    <div className=\"selectors\">\n      <TextField\n        id=\"username-input\"\n        label=\"Username\"\n        type=\"search\"\n        onChange={(v) => setUser(v.target.value)} />\n      <TextField\n        id=\"password-input\"\n        label=\"Password\"\n        type=\"password\"\n        onChange={(v) => setPass(v.target.value)}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => props.submit(user, pass)}\n      >\n        Submit\n      </Button>\n    </div>);\n}\n\nconst Content = props => {\n  const views = [<LeaderboardView players={props.leaderboard.list} />,\n  <ReportView players={props.leaderboard.list} submit={props.submit} />,\n  <History />,\n  <Login submit={props.login} />];\n  return views[props.view];\n}\n\nconst win_probability = (mmrW, mmrL) => {\n  return (1 / (1 + Math.pow(10, (mmrW - mmrL) / 400)));\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_view: 0,\n      players: [],\n      leaderboard: new Leaderboard([]),\n      user: null,\n    };\n  }\n\n  componentDidMount() {\n    database.ref('users').orderByChild('rating').on('value', data => {\n      this.setState(() => {\n        const players = [];\n        data.forEach(user => {\n          const player = user.toJSON();\n          player['username'] = user.key;\n          players.push(player);\n        });\n        const leaderboard = new Leaderboard(players);\n        return { players, leaderboard };\n      })\n    });\n  }\n\n  login(user, pass) {\n    let i = 0;\n    while (i < this.state.players.length && this.state.players[i].username !== user) {\n      i += 1;\n    }\n    if (i === this.state.players.length) {\n      alert(\"Username is incorrect\");\n      return;\n    }\n    else if (md5(pass) !== this.state.players[i].password) {\n      alert(\"Password is incorrect\");\n      return;\n    }\n    this.setState({ current_view: 0, user: user });\n  }\n\n  change_current_view(val) {\n    this.setState({ current_view: val });\n  }\n\n  add_game(winner, loser) {\n    if (this.state.user === null) {\n      alert(\"You need to be logged in\");\n      return;\n    }\n    database.ref('users').once('value').then(data => {\n      if (data.hasChild(winner) && data.hasChild(loser)) {\n        const mmrW = data.child(winner + '/rating').val();\n        const mmrL = data.child(loser + '/rating').val();\n        const gamesW = data.child(winner + '/games_played').val();\n        const gamesL = data.child(loser + '/games_played').val();\n        const nameW = data.child(winner + '/name').val();\n        const nameL = data.child(loser + '/name').val();\n        const win_prob = win_probability(mmrW, mmrL);\n        const change = Math.round(win_prob * 50);\n\n        const d = new Date();\n\n        const historyKey = database.ref('history').push().key;\n        const newHistory = {\n          winner: nameW,\n          loser: nameL,\n          posted_by: this.state.user,\n          mmr_change: change,\n          date: (d.getMonth() + 1).toString() + '/' + d.getDate().toString(),\n        }\n\n        const updates = {};\n        updates['/history/' + historyKey] = newHistory;\n        updates['users/' + winner + '/rating'] = mmrW + change;\n        updates['users/' + loser + '/rating'] = mmrL - change;\n        updates['users/' + winner + '/games_played'] = gamesW + 1;\n        updates['users/' + loser + '/games_played'] = gamesL + 1;\n        database.ref().update(updates);\n      }\n    });\n    this.change_current_view(0);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"content-container\">\n          <Content\n            leaderboard={this.state.leaderboard}\n            view={this.state.current_view}\n            submit={(winner, loser) => this.add_game(winner, loser)}\n            login={(user, pass) => this.login(user, pass)} />\n        </div>\n        <div className=\"footer\">\n          <BottomNav\n            value={this.state.current_view}\n            update={(v) => this.change_current_view(v)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}