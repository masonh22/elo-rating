{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","BottomNav","props","value","BottomNavigation","onChange","event","newValue","update","showLabels","className","BottomNavigationAction","label","LeaderboardView","list","leaderboard","map","player","rank","key","username","name","rating","games_played","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","ReportView","classes","React","useState","winner","setWinner","loser","setLoser","makeList","taken","i","players","length","push","MenuItem","FormControl","InputLabel","id","Select","labelId","e","target","Button","variant","color","onClick","submit","History","state","history","ref","limitToLast","once","data","setState","forEach","toJSON","reverse","this","date","mmr_change","make_list","Component","Login","user","setUser","pass","setPass","TextField","type","v","Content","login","view","App","current_view","orderByChild","on","unshift","val","then","md5","alert","mmrW","mmrL","gamesW","gamesL","nameW","nameL","win_prob","Math","pow","win_probability","change","round","d","Date","historyKey","newHistory","posted_by","getMonth","toString","getDate","updates","change_current_view","add_game","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0114f265.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAgCVdrbzL6Qcc5byXkkABSm4oUAonDWhs\",\r\n  authDomain: \"elo-rating-b8532.firebaseapp.com\",\r\n  databaseURL: \"https://elo-rating-b8532.firebaseio.com\",\r\n  projectId: \"elo-rating-b8532\",\r\n  storageBucket: \"elo-rating-b8532.appspot.com\",\r\n  messagingSenderId: \"1089038380501\",\r\n  appId: \"1:1089038380501:web:66b47d2dd736f330f8615c\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;\r\n/*\r\n<!-- The core Firebase JS SDK is always required and must be listed first -->\r\n<script src=\"https://www.gstatic.com/firebasejs/7.19.0/firebase-app.js\"></script>\r\n\r\n<!-- TODO: Add SDKs for Firebase products that you want to use\r\n     https://firebase.google.com/docs/web/setup#available-libraries -->\r\n\r\n<script>\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAgCVdrbzL6Qcc5byXkkABSm4oUAonDWhs\",\r\n    authDomain: \"elo-rating-b8532.firebaseapp.com\",\r\n    databaseURL: \"https://elo-rating-b8532.firebaseio.com\",\r\n    projectId: \"elo-rating-b8532\",\r\n    storageBucket: \"elo-rating-b8532.appspot.com\",\r\n    messagingSenderId: \"1089038380501\",\r\n    appId: \"1:1089038380501:web:66b47d2dd736f330f8615c\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n</script>*/","import React from 'react';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport firebase from './firebase.js';\nimport md5 from 'md5';\n\nconst database = firebase.database();\n\n\nconst BottomNav = props => {\n  const value = props.value;\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => {\n        props.update(newValue);\n      }}\n      showLabels\n      className=\"bottom-nav\"\n    >\n      <BottomNavigationAction label=\"Leaderboard\" />\n      <BottomNavigationAction label=\"Report Game\" />\n      <BottomNavigationAction label=\"History\" />\n      <BottomNavigationAction label=\"Log in\" />\n    </BottomNavigation>\n  )\n}\n\nconst LeaderboardView = props => {\n  const list = props.leaderboard.map((player, rank) =>\n    <li key={player.username}>{player.name}, MMR: {player.rating}, Games played: {player.games_played}</li>\n  );\n  return <ol>{list}</ol>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst ReportView = props => {\n  const classes = useStyles();\n  const [winner, setWinner] = React.useState('');\n  const [loser, setLoser] = React.useState('');\n\n  const makeList = (taken) => {\n    const list = [];\n    for (var i = 0; i < props.players.length; i++) {\n      if (props.players[i].username === taken) continue;\n      list.push(<MenuItem value={props.players[i].username}>{props.players[i].name}</MenuItem>)\n    }\n    return list;\n  };\n\n  return (\n    <div className=\"selectors\">\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"winner-select-label\">Winner</InputLabel>\n        <Select\n          labelId=\"winner-select-label\"\n          id=\"winner-select\"\n          value={winner}\n          onChange={(e) => setWinner(e.target.value)}\n          className=\"select\"\n        >\n          {makeList(loser)}\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"loser-select-label\">Loser</InputLabel>\n        <Select\n          labelId=\"loser-select-label\"\n          id=\"loser-select\"\n          value={loser}\n          onChange={(e) => setLoser(e.target.value)}\n          className=\"select\"\n        >\n          {makeList(winner)}\n        </Select>\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => props.submit(winner, loser)}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { history: [] };\n  }\n\n  componentDidMount() {\n    database.ref('history').limitToLast(5).once('value', data => {\n      this.setState(() => {\n        const history = [];\n        data.forEach(event => {\n          history.push(event.toJSON());\n        })\n        return { history: history.reverse() };\n      });\n    });\n  }\n\n  make_list() {\n    return this.state.history.map((event, rank) =>\n      <li key={event.key}>{event.date}: {event.winner} beats {event.loser}, +/- {event.mmr_change} MMR</li>\n    );\n  }\n\n  render() {\n    return <ul>{this.make_list()}</ul>;\n  }\n}\n\nconst Login = props => {\n  const [user, setUser] = React.useState('');\n  const [pass, setPass] = React.useState('');\n\n  return (\n    <div className=\"selectors\">\n      <TextField\n        id=\"username-input\"\n        label=\"Username\"\n        type=\"search\"\n        onChange={(v) => setUser(v.target.value)} />\n      <TextField\n        id=\"password-input\"\n        label=\"Password\"\n        type=\"password\"\n        onChange={(v) => setPass(v.target.value)}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => props.submit(user, pass)}\n      >\n        Submit\n      </Button>\n    </div>);\n}\n\nconst Content = props => {\n  const views = [<LeaderboardView leaderboard={props.leaderboard} />,\n  <ReportView players={props.leaderboard} submit={props.submit} />,\n  <History />,\n  <Login submit={props.login} />];\n  return views[props.view];\n}\n\nconst win_probability = (mmrW, mmrL) => {\n  return (1 / (1 + Math.pow(10, (mmrW - mmrL) / 400)));\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_view: 0,\n      players: {},\n      leaderboard: [],\n      user: null,\n    };\n  }\n\n  componentDidMount() {\n    database.ref('users').orderByChild('rating').on('value', data => {\n      this.setState(() => {\n        const leaderboard = [];\n        data.forEach(user => {\n          const player = user.toJSON();\n          player['username'] = user.key;\n          leaderboard.unshift(player);\n        });\n        return { players: data.val(), leaderboard };\n      })\n    });\n  }\n\n  login(user, pass) {\n    if (!this.state.players[user]) {\n      alert(\"Username is incorrect\");\n      return;\n    }\n    database.ref('passwords').once('value').then(data => {\n      if (md5(pass) !== data.val()[user]) {\n        alert(\"Password is incorrect\");\n        return;\n      }\n      alert(`Signed in as ${user}`);\n      this.setState({ current_view: 0, user: user });\n    });\n  }\n\n  change_current_view(val) {\n    this.setState({ current_view: val });\n  }\n\n  add_game(winner, loser) {\n    if (this.state.user === null) {\n      alert(\"You need to be logged in\");\n      return;\n    }\n    if (this.state.players[winner] && this.state.players[loser]) {\n      const mmrW = this.state.players[winner].rating;\n      const mmrL = this.state.players[loser].rating;\n      const gamesW = this.state.players[winner].games_played;\n      const gamesL = this.state.players[loser].games_played;\n      const nameW = this.state.players[winner].name;\n      const nameL = this.state.players[loser].name;\n      const win_prob = win_probability(mmrW, mmrL);\n      const change = Math.round(win_prob * 50);\n\n      const d = new Date();\n\n      const historyKey = database.ref('history').push().key;\n      const newHistory = {\n        winner: nameW,\n        loser: nameL,\n        posted_by: this.state.user,\n        mmr_change: change,\n        date: (d.getMonth() + 1).toString() + '/' + d.getDate().toString(),\n      }\n\n      const updates = {};\n      updates['/history/' + historyKey] = newHistory;\n      updates['users/' + winner + '/rating'] = mmrW + change;\n      updates['users/' + loser + '/rating'] = mmrL - change;\n      updates['users/' + winner + '/games_played'] = gamesW + 1;\n      updates['users/' + loser + '/games_played'] = gamesL + 1;\n      database.ref().update(updates);\n    }\n    this.change_current_view(0);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"content-container\">\n          <Content\n            leaderboard={this.state.leaderboard}\n            view={this.state.current_view}\n            submit={(winner, loser) => this.add_game(winner, loser)}\n            login={(user, pass) => this.login(user, pass)} />\n        </div>\n        <div className=\"footer\">\n          <BottomNav\n            value={this.state.current_view}\n            update={(v) => this.change_current_view(v)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}